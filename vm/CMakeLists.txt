cmake_minimum_required(VERSION 2.8)
project(build)
include(CheckCCompilerFlag)
include(ExternalProject)

enable_testing()

find_path(ZLIB_H_PATH zlib.h)
if(NOT ZLIB_H_PATH)
  message(FATAL_ERROR "zlib.h not found")
endif()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Debug")
endif()

if(NOT ARCH)
  message(FATAL_ERROR "ARCH not set")
endif()
if(NOT ARCH MATCHES "^(x86|x86_64|armv6|armv7|thumbv6|thumbv7)$")
  message(FATAL_ERROR "Unsupported ARCH: ${ARCH}")
endif()
if(NOT OS)
  message(FATAL_ERROR "OS not set")
endif()
if(NOT OS MATCHES "^(linux|macosx|ios)$")
  message(FATAL_ERROR "Unsupported OS: ${OS}")
endif()

if(OS STREQUAL "linux")
  set(LINUX YES)
  set(OS_FAMILY linux)
elseif(OS STREQUAL "macosx")
  set(MACOSX YES)
  set(DARWIN YES)
  set(OS_FAMILY darwin)
elseif(OS STREQUAL "ios")
  set(IOS YES)
  set(DARWIN YES)
  set(OS_FAMILY darwin)
endif()

if (ARCH STREQUAL "x86_64")
  set(X86_64 YES)
elseif (ARCH STREQUAL "x86")
  set(X86 YES)
elseif (ARCH STREQUAL "armv6")
  set(ARM YES)
  set(ARMV6 YES)
elseif (ARCH STREQUAL "armv7")
  set(ARM YES)
  set(ARMV7 YES)
elseif (ARCH STREQUAL "thumbv6")
  set(ARM YES)
  set(THUMB YES)
  set(THUMBV6 YES)
elseif (ARCH STREQUAL "thumbv7")
  set(ARM YES)
  set(THUMB YES)
  set(THUMBV7 YES)
endif()

if(DARWIN)
  set(CARCH ${ARCH})
  if (ARCH STREQUAL "x86")
    set(CARCH i386)
  elseif (ARCH STREQUAL "thumbv6")
    set(CARCH armv6)
    set(CARCH_FLAGS "${CARCH_FLAGS} -mthumb")
  elseif (ARCH STREQUAL "thumbv7")
    set(CARCH armv7)
    set(CARCH_FLAGS "${CARCH_FLAGS} -mthumb")
  endif()
endif()

if(IOS)
  if(NOT SYSROOT)
    if(ARCH STREQUAL "x86")
      set(SYSROOT "/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk")
    else()
      set(SYSROOT "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk")
    endif()
  endif()
endif()

message(STATUS "ARCH: ${ARCH}")
message(STATUS "OS: ${OS}")
message(STATUS "SYSROOT: ${SYSROOT}")
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")

set(EXTGC_CFLAGS "-fdata-sections -ffunction-sections")
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(EXTGC_CFLAGS "${EXTGC_CFLAGS} -g")
else()
  set(EXTGC_CFLAGS "${EXTGC_CFLAGS} -02")
endif()
if(DARWIN)
  set(EXTGC_CFLAGS "${EXTGC_CFLAGS} -DNO_DYLD_BIND_FULLY_IMAGE -arch ${CARCH} ${CARCH_FLAGS}")
  if(IOS)
    set(EXTGC_CFLAGS "${EXTGC_CFLAGS} -isysroot ${SYSROOT} -miphoneos-version-min=3.0")
    if (ARCH MATCHES ".*(thumb|arm).*")
      set(HOST --host=arm-apple-darwin7)
    endif()
  endif()
endif()
# TODO: Use CMake to build GC? There is a CMakeLists.txt but I cannot get the install to work.
ExternalProject_Add(extgc 
  URL ${CMAKE_SOURCE_DIR}/dependencies/bdwgc-20120327.tar.gz
  PATCH_COMMAND patch -d ../extgc -p1 < ${CMAKE_SOURCE_DIR}/dependencies/bdwgc.patch
  CONFIGURE_COMMAND bash -c "CC=${CMAKE_C_COMPILER} CFLAGS='${EXTGC_CFLAGS}' ../extgc/configure ${HOST} --enable-shared=no --prefix=${CMAKE_BINARY_DIR}/gc"
)

include_directories(hyprt/include core/include ${ZLIB_H_PATH} ${CMAKE_BINARY_DIR}/gc/include)
link_directories(${CMAKE_BINARY_DIR}/gc/lib)
add_definitions(-Wall)
add_definitions(-fno-omit-frame-pointer) # The unwind code relies on frame pointers being present.
add_definitions(-fasynchronous-unwind-tables) # Generate eh frames for C code. Without it we cannot unwind.
if(LINUX)
  add_definitions(-D_GNU_SOURCE)
endif()
add_definitions(-DGC_THREADS)
add_definitions(-include ${CMAKE_BINARY_DIR}/gc/include/gc/gc.h)
add_definitions(-DIPv6_FUNCTION_SUPPORT)

if((LINUX OR DARWIN) AND CMAKE_SIZEOF_VOID_P MATCHES "8")
  CHECK_C_COMPILER_FLAG("-fPIC" WITH_FPIC)
  if (WITH_FPIC)
    add_definitions(-fPIC)
  endif()
endif()

if(LINUX)
  set(HY_OS linux)
  add_definitions(-DLINUX)
  add_definitions(-fdata-sections -ffunction-sections)
  include_directories(hyprt/include/unix)
elseif(DARWIN)
  if(MACOSX)
    add_definitions(-DMACOSX)
  else()
    add_definitions(-DIOS)
    add_definitions(-isysroot ${SYSROOT})
    set(LINKER_FLAGS "${LINKER_FLAGS} -isysroot ${SYSROOT} -miphoneos-version-min=3.0")
  endif()
  set(HY_OS macosx)
  add_definitions(-DDARWIN)
  add_definitions(-arch ${CARCH})
  add_definitions(${CARCH_FLAGS})
  include_directories(hyprt/include/unix)
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${LINKER_FLAGS}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LINKER_FLAGS}")
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${LINKER_FLAGS}")
endif()

if (ARCH STREQUAL "x86_64")
  add_definitions(-DHYX86_64)
  add_definitions(-DNVM_X86_64)
elseif (ARCH STREQUAL "x86")
  add_definitions(-DHYX86)
  add_definitions(-DNVM_X86)
elseif (ARCH STREQUAL "armv6")
  add_definitions(-DHYARM)
  add_definitions(-DNVM_ARMV6)
elseif (ARCH STREQUAL "armv7")
  add_definitions(-DHYARM)
  add_definitions(-DNVM_ARMV7)
elseif (ARCH STREQUAL "thumbv6")
  add_definitions(-DHYARM)
  add_definitions(-DNVM_THUMBV6)
elseif (ARCH STREQUAL "thumbv7")
  add_definitions(-DHYARM)
  add_definitions(-DNVM_THUMBV7)
endif()

set(INSTALL_DIR ${CMAKE_SOURCE_DIR}/binaries/${OS}/${ARCH}/${CMAKE_BUILD_TYPE})

install(FILES ${CMAKE_BINARY_DIR}/gc/lib/libgc.a DESTINATION ${INSTALL_DIR})

add_subdirectory(core/src)
add_subdirectory(bc/src)
add_subdirectory(hyprt/src)
add_subdirectory(rt/src)

